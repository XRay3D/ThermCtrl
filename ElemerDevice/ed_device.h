#pragma once

#include "ed_common_types.h"
#include "ed_port.h"
#include "ed_utils.h"
//my
#include <commoninterfaces.h>
//Qt
#include <QSemaphore>
#include <QThread>
#include <chrono>
#include <concepts>

using namespace std::chrono_literals;

namespace Elemer {

template <class Cmd>
concept is_command = requires
{
    requires std::is_enum_v<Cmd> || std::is_integral_v<Cmd> || std::is_same_v<Cmd, Hex>;
};

template <class T>
concept convertible_to_from_hex = requires
{
    std::is_arithmetic_v<T>;
    std::is_enum_v<T>;
    std::is_pod_v<T>;
    std::is_trivial_v<T>;
};

//&&common_reference_with<add_lvalue_reference_t<const _Ty1>, add_lvalue_reference_t<const _Ty2>>&& common_reference_with<add_lvalue_reference_t<common_type_t<_Ty1, _Ty2>>,
//    common_reference_t<add_lvalue_reference_t<const _Ty1>, add_lvalue_reference_t<const _Ty2>>>;

enum DeviceType : uint16_t {
    Null,

    KDS = 25,

    COMMUTATOR = 16,

    IKSU_2000 = 15,

    IRT5501 = 41,
    IRT5502 = 54,
    IRT5920 = 9,

    MAN = 50,
};

enum class DTR : bool {
    Off,
    On
};

enum class DTS : bool {
    Off,
    On
};

class AsciiDevice : public QObject, public CommonInterfaces {
    Q_OBJECT
    friend class Port;
    friend class PortOpener;

public:
    AsciiDevice(QObject* parent = nullptr, DTR dtr = DTR::Off, DTS dts = DTS::Off, PortPolicy policy = PortPolicy::AlwaysOpen);
    ~AsciiDevice();

    virtual DeviceType type() const = 0;
    bool ping(const QString& portName = {}, int baud = 9600, int addr = 0) override;

    DeviceType getDevType(int addr);

    bool success();
    bool checkParcel();

    QByteArray calcCrc(const QByteArray& parcel);

    Port* port() const;
    uint8_t address() const;
    virtual bool setAddress(uint8_t address);

    /* FILE */
    bool fileOpen();
    bool fileClose();
    bool fileSeek(uint16_t offset = 0, Seek seek = Seek::Set);

    template <typename... Ts>
    bool fileRead(Ts&... vals)
    {
        bool success = isConnected() && readFileHex<FileCmd::Read>(vals...);
        return success;
    }

    template <typename... Ts>
    bool fileWrite(Ts&&... data)
    {
        bool success = isConnected() && writeHex<FileCmd::Write>(data...) == RetCcode::Ok;
        return success;
    }

    // HEX
    template <auto... Cmds, typename... Ts>
    inline int writeHex(Ts... vars) requires(is_command<decltype(Cmds)>&&... && true)
    {
        emit write(createParcel(m_address, Cmds..., Elemer::Hex { vars... }));
        if (wait())
            return m_lastRetCode = m_data[1].mid(1).toInt();
        return -1;
    }

    template <auto... Cmds, typename... Ret>
    inline bool readHex(Ret&&... ret) requires(is_command<decltype(Cmds)>&&... && true)
    {
        qDebug(__FUNCSIG__);
        emit write(createParcel(m_address, Cmds...));
        constexpr size_t packSize = (sizeof(Ret) + ... + 0);
        if (wait() && m_data[1].size() == packSize * 2) {
            int ctr {};
            ((FromHex { ret } = m_data[1].mid(ctr, sizeof(Ret) * 2), ctr += sizeof(Ret) * 2), ...);
            return true;
        }
        return false;
    }

    template <auto... Cmds, typename... Ret>
    inline bool readFileHex(Ret&&... ret) requires(is_command<decltype(Cmds)>&&... && true)
    {
        qDebug(__FUNCSIG__);
        constexpr size_t packSize = (sizeof(Ret) + ... + 0);
        return readHex<Cmds..., packSize>(ret...);
    }

    // STRING
    template <auto... Cmds, typename... Ts>
    inline int writeStr(Ts... vars) requires(is_command<decltype(Cmds)>&&... && true)
    {
        emit write(createParcel(m_address, Cmds..., vars...));
        if (wait())
            return m_lastRetCode = m_data[1].mid(1).toInt();
        return -1;
    }

    template <auto... Cmds, typename... Ret>
    inline bool readStr(Ret&&... ret) requires(is_command<decltype(Cmds)>&&... && true)
    {
        emit write(createParcel(m_address, Cmds...));
        if (wait() && sizeof...(Ret)) {
            int ctr {};
            ((FromStr { ret } = m_data[1 + ctr++]), ...);
            return true;
        }
        return false;
    }

public:
    template <typename... Ts>
    QByteArray createParcel(Ts&&... args)
    {
        parcel = Parcel(args...);
        parcel.append(calcCrc(parcel)).append('\r');
        return QByteArray(1, -1 /*0xFF*/) + parcel;
    }

    template <typename T>
    auto fromHex(int index, bool* ok = nullptr) requires convertible_to_from_hex<T>
    {
        return fromHex<T>(QByteArray::fromHex(m_data.value(index)), ok);
    }

    template <typename T>
    auto fromHex(const QByteArray& data, bool* ok = nullptr) requires convertible_to_from_hex<T>
    {
        if (data.size() != sizeof(T)) {
            ok ? (*ok = false) : false;
            return T {};
        }
        ok ? (*ok = true) : true;
        return *reinterpret_cast<T*>(const_cast<char*>(data.data()));
    }

    static void waitAllReset() { waitAllSemaphore.acquire(waitAllSemaphore.available()); }
    static bool waitAll(int n, int timeout) { return waitAllSemaphore.tryAcquire(n, timeout); }

signals:
    void open(int mode) override;
    void close() override;
    void write(const QByteArray& data);
    void message(const QString&, int timout = {});

protected:
    bool wait(int timeout = 1000);
    static inline QSemaphore waitAllSemaphore;

    Port* m_port;
    QList<QByteArray> m_data;
    int m_lastRetCode;
    QByteArray m_parcel;
    QSemaphore m_semaphore;
    QThread m_portThread;
    QMutex m_mutex;
    uint8_t m_address {};

    const DTR dtr;
    const DTS dts;
    const PortPolicy policy;

private:
    QByteArray parcel;

    static constexpr uint8_t tableCrc16Lo[] {
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
    };

    static constexpr uint8_t tableCrc16Hi[] {
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
        0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
        0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
        0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
        0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
        0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
        0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
        0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
        0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
        0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
        0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
        0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
        0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
        0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
        0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
    };
};

class PortOpener { // RAII
    AsciiDevice* const pAsciiDevice;

public:
    explicit PortOpener(AsciiDevice* ad);
    ~PortOpener();
};
}
